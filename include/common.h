#pragma once

#include "obj.h"

#define free_list_size (1 << 18)

////////////////////////////////////////////////////////////////////////////////////////////////////
// types
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef enum {
  MONO_STD,
  STD_FUNDAMENTAL_ONLY,
  SPLIT_STD,
} std_mode_t;

typedef struct setopts_result_t {
  bool opts_ok;
  bool log_core;
  bool log_eval;
  bool log_macro;
  std_mode_t std_mode;
} setopts_result_t;
////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////
// data
////////////////////////////////////////////////////////////////////////////////////////////////////
extern char       mem[free_list_size]; // the string pool.
extern ae_obj_t * program;             // bison will put the last parsed program here.
extern bool       log_core;            // global toggle.
extern bool       log_eval;            // global toggle.
extern bool       log_macro;           // global toggle.
extern bool       read_error;          // set by yacc/flex, read by repl.c/ae.c.
extern ae_obj_t * filename_stack;      // keeps track of the current file being parsed.
extern ae_obj_t * line_stack;          // keeps track of line in previous file.
////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////
// functions
////////////////////////////////////////////////////////////////////////////////////////////////////
void            preface(void); 
void            paint_parsed(void);
setopts_result_t setopts(int argc, char * argv[]);
ae_obj_t *      load_file(const char * filename, bool * const failed_to_open);
////////////////////////////////////////////////////////////////////////////////////////////////////
