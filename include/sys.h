#pragma once

#include <stdbool.h>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef enum {
  FRS_READ,
  FRS_NO_ALLOC,
  FRS_NO_OPEN
} fread_string_state_t;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct fread_string_t {
  fread_string_state_t state;
  char *               buffer;
  size_t               length;
} fread_string_t;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef enum {
  CCOS_STATE_COMPLETED,
  CCOS_STATE_NO_EXEC,
  CCOS_STATE_NO_PIPE,
  CCOS_STATE_NO_FORK,
} captured_command_output_state_t;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct captured_command_output_t {
  captured_command_output_state_t state;
  char *                          stdout;
  char *                          stderr; 
  int                             exit;
} captured_command_output_t;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
char *                    ae_sys_read_from_fd(int fd, size_t * const size);
captured_command_output_t ae_sys_capture_command_output(char * const command);
bool                      ae_sys_expand_tilde(const char * const path, char ** expanded_path);
bool                      ae_sys_file_exists(const char * const filename);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
