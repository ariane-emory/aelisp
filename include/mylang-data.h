#pragma once

#define MYLANG_OBJECT_HAS_UNION_MEMBER

#define YYSTYPE mylang_string_t

typedef char * mylang_string_t;

////////////////////////////////////////////////////////////////////////////////
// forward declaration
////////////////////////////////////////////////////////////////////////////////

typedef struct mylang_object_t mylang_object_t;
typedef struct mylang_list_t   mylang_list_t;

////////////////////////////////////////////////////////////////////////////////
// Types enum
////////////////////////////////////////////////////////////////////////////////

typedef enum {
  ML_INVALID = 0,
  ML_STRING,
  ML_CHAR,
  ML_INT,
  ML_FLOAT,
  ML_RATIONAL,
  ML_LIST,
} mylang_type_t;

////////////////////////////////////////////////////////////////////////////////
// Rational type
////////////////////////////////////////////////////////////////////////////////

typedef struct mylang_rational_t {
  int                    numerator;
  unsigned int           denominator;
} mylang_rational_t;

////////////////////////////////////////////////////////////////////////////////
// Data type
////////////////////////////////////////////////////////////////////////////////

typedef union {
  char *                 string_value;
  char                   char_value;
  int                    int_value;
  double                 float_value;
  mylang_rational_t      rational_value;
  mylang_list_t *        list_value;
} mylang_data_t;

////////////////////////////////////////////////////////////////////////////////
// Object type
////////////////////////////////////////////////////////////////////////////////

typedef struct mylang_object_t {
  mylang_type_t          type;
  mylang_string_t        c_str;
  mylang_data_t          data;
} mylang_object_t;

void mylang_object_init(mylang_object_t * const mylang_object);

////////////////////////////////////////////////////////////////////////////////
// List type
////////////////////////////////////////////////////////////////////////////////

typedef struct mylang_list_t {
  mylang_object_t *      head;
  struct mylang_list_t * tail;
} mylang_list_t;
